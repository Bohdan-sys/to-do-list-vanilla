/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_toDoList_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/toDoList.js */ \"./src/js/utils/toDoList.js\");\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const _ = new _utils_toDoList_js__WEBPACK_IMPORTED_MODULE_0__.ToDoList('.js-form');\n});\n\n\n\n//# sourceURL=webpack://vanilla/./src/js/script.js?");

/***/ }),

/***/ "./src/js/utils/toDoList.js":
/*!**********************************!*\
  !*** ./src/js/utils/toDoList.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ToDoList\": () => (/* binding */ ToDoList)\n/* harmony export */ });\nclass ToDoList {\n    constructor(element) {\n        this.element = element;\n        this.editElement = {};\n        this.input = null;\n        this.list = null;\n        this.options = {\n            input: '.js-input',\n            list: '.js-list'\n        };\n\n        this.classes = {\n            listItem: 'js-list-item',\n            editButton: 'js-edit-button',\n            removeButton: 'js-remove-button',\n            completeCheckbox: 'js-complete',\n            complete: 'is-complete'\n        };\n\n        this.data = JSON.parse(localStorage.getItem('todos')) || [];\n        this.init();\n    }\n\n    init() {\n        const { input, list } = this.options;\n\n        if (this.element && typeof this.element === 'string') {\n            this.element = document.querySelector(this.element);\n\n            this.input = document.querySelector(input);\n            this.list = document.querySelector(list);\n\n        }\n\n        this.createList();\n        this.addEvents();\n    }\n\n    addEvents() {\n        if (this.element) {\n            this.element.addEventListener('submit', e => {\n                e.preventDefault();\n                if (Object.keys(this.editElement).length) {\n                    this.editElement.text = this.input.value;\n                    this.data = this.data.map(element => element.id === this.editElement.id ? this.editElement : element);\n                } else {\n                    const task = { id: this.createUid(), text: this.input.value, complete: false }\n                    this.data.unshift(task);\n                }\n\n                this.updateStorage();\n                this.createList();\n                this.input.value = '';\n                this.editElement = {};\n            });\n        }\n\n        if (this.list) {\n            this.list.addEventListener('click', this.action.bind(this));\n        }\n    }\n\n    action(e) {\n        const { listItem, editButton, removeButton, completeCheckbox } = this.classes;\n        const target = e.target;\n        const listElement = target.closest(`.${listItem}`);\n\n        if (target.classList.contains(removeButton)) {\n            this.data = this.data.filter(item => item.id !== listElement.dataset.uid);\n            this.updateStorage();\n            this.createList();\n            this.editElement = {};\n        }\n\n        if (target.classList.contains(editButton)) {\n            this.editElement = this.data.find(element => element.id === listElement.dataset.uid);\n            this.input.value = this.editElement.text;\n        }\n\n        if (target.classList.contains(completeCheckbox)) {\n            this.data = this.data.map(element => {\n                if (element.id === listElement.dataset.uid) {\n                    element.complete = target.checked;\n                }\n                return element;\n            });\n            this.updateStorage();\n            this.createList();\n        }\n    }\n\n    updateStorage() {\n        localStorage.setItem('todos', JSON.stringify(this.data));\n    }\n\n    createUid() {\n        return Math.random().toString(36).replace('0.', '');\n    }\n\n    createElement(element, index) {\n        if (this.list) {\n            const item = `\n            <li class=\"list__item js-list-item ${element.complete ? this.classes.complete : \"\"}\" data-uid=\"${element.id}\">\n                <div class=\"card\">\n                    <h2 class=\"card__title\"><span>${index + 1}. </span>${element.text}</h2>\n                    <div class=\"card__actions\">\n                        <div class=\"card__complete\">\n                            <input type=\"checkbox\" class=\"js-complete\" id=\"${element.id}\" ${element.complete ? \"checked\" : \"\"}/>\n                            <label for=\"${element.id}\">Complete mark</label>\n                        </div>\n                        <button class=\"card__edit js-edit-button\">\n                            edit\n                        </button>\n                        <button class=\"card__remove js-remove-button\">\n                            remove\n                        </button>\n                    </div>\n                </div>\n            </li>`;\n            this.list.insertAdjacentHTML('beforeend', item)\n        }\n    }\n\n    createList() {\n        this.list.innerHTML = '';\n        this.data.forEach((data, index) => {\n            this.createElement(data, index)\n        })\n    }\n}\n\n\n//# sourceURL=webpack://vanilla/./src/js/utils/toDoList.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/script.js");
/******/ 	
/******/ })()
;